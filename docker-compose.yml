services:
  gitlab:
    image: gitlab/gitlab-ce:16.3.4-ce.0
    container_name: gitlab
    restart: always
    hostname: ${GITLAB_HOST}
    shm_size: 256m
    deploy:
      resources:
        limits:
          memory: ${GITLAB_MEMORY_LIMIT:-8G}
          cpus: '${GITLAB_CPU_LIMIT:-4}'
        reservations:
          memory: ${GITLAB_MEMORY_RESERVATION:-4G}
          cpus: '${GITLAB_CPU_RESERVATION:-2}'
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url '${GITLAB_URL}'
        
        # Admin Configuration
        gitlab_rails['initial_root_password'] = '${GITLAB_ROOT_PASSWORD}'
        gitlab_rails['initial_root_email'] = '${GITLAB_ROOT_EMAIL}'
        
        gitlab_rails['backup_keep_time'] = 604800
        gitlab_rails['gitlab_ssh_host'] = '${GITLAB_SSH_HOST}'
        gitlab_rails['gitlab_shell_ssh_port'] = ${GITLAB_SSH_PORT}
        nginx['listen_port'] = 80
        nginx['redirect_http_to_https'] = false
        
        # Fix shared memory issues for Prometheus
        prometheus['enable'] = ${PROMETHEUS_ENABLE}
        prometheus['flags'] = {
          'storage.tsdb.path' => "/var/opt/gitlab/prometheus/data",
          'storage.tsdb.retention.time' => "15d",
          'config.file' => "/var/opt/gitlab/prometheus/prometheus.yml"
        }
        
        # Reduce Prometheus scrape frequency to reduce shm pressure
        prometheus['scrape_interval'] = ${PROMETHEUS_SCRAPE_INTERVAL}
        prometheus['scrape_timeout'] = 10
        
        # Grafana configuration
        grafana['enable'] = ${GRAFANA_ENABLE}
        
        # Reduce memory pressure
        puma['worker_processes'] = ${PUMA_WORKERS:-2}
        puma['max_threads'] = ${PUMA_MAX_THREADS:-4}
        puma['min_threads'] = ${PUMA_MIN_THREADS:-1}
        
        # Sidekiq configuration (CI/CD jobs)
        sidekiq['max_concurrency'] = ${SIDEKIQ_CONCURRENCY:-5}
        sidekiq['queue_selector'] = true
        sidekiq['interval'] = 5
        
        # GitLab Runner limits (if using built-in runner)
        gitlab_rails['gitlab_shell_ssh_port'] = ${GITLAB_SSH_PORT}
        gitlab_rails['gitlab_default_projects_limit'] = ${DEFAULT_PROJECTS_LIMIT:-100}
        gitlab_rails['gitlab_default_can_create_group'] = true
        
        # Database connection pool
        postgresql['max_connections'] = ${POSTGRES_MAX_CONNECTIONS:-100}
        postgresql['shared_buffers'] = '${POSTGRES_SHARED_BUFFERS:-512MB}'
        postgresql['work_mem'] = '${POSTGRES_WORK_MEM:-16MB}'
        postgresql['maintenance_work_mem'] = '${POSTGRES_MAINTENANCE_WORK_MEM:-64MB}'
        
        # Redis configuration
        redis['maxmemory'] = '${REDIS_MAX_MEMORY:-256MB}'
        redis['maxmemory_policy'] = 'allkeys-lru'
        
        # Disable resource-intensive features if needed
        gitlab_rails['usage_ping_enabled'] = ${USAGE_PING_ENABLED:-false}
        gitlab_rails['seat_link_enabled'] = ${SEAT_LINK_ENABLED:-false}
        
        # SMTP Configuration
        gitlab_rails['smtp_enable'] = ${SMTP_ENABLE}
        gitlab_rails['smtp_address'] = '${SMTP_ADDRESS}'
        gitlab_rails['smtp_port'] = ${SMTP_PORT}
        gitlab_rails['smtp_user_name'] = '${SMTP_USER_NAME}'
        gitlab_rails['smtp_password'] = '${SMTP_PASSWORD}'
        gitlab_rails['smtp_domain'] = '${SMTP_DOMAIN}'
        gitlab_rails['smtp_authentication'] = '${SMTP_AUTHENTICATION}'
        gitlab_rails['smtp_enable_starttls_auto'] = ${SMTP_ENABLE_STARTTLS_AUTO}
        gitlab_rails['smtp_tls'] = ${SMTP_TLS}
        gitlab_rails['gitlab_email_from'] = '${SMTP_USER_NAME}'
        gitlab_rails['gitlab_email_reply_to'] = '${SMTP_USER_NAME}'
    ports:
      - "${GITLAB_HTTP_PORT}:80"
      - "${GITLAB_SSH_PORT}:22"
    volumes:
      - ./data/config:/etc/gitlab
      - ./data/logs:/var/log/gitlab
      - ./data/data:/var/opt/gitlab
      - ${BACKUP_PATH}:/backups
    tmpfs:
      - /dev/shm:size=256m,noexec,nosuid,nodev
      - /tmp:size=512m,noexec,nosuid,nodev
    networks:
      - gitlab_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/-/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  gitlab-backup:
    image: gitlab/gitlab-ce:16.3.4-ce.0
    container_name: gitlab-backup
    restart: unless-stopped
    environment:
      - CRON_SCHEDULE=${BACKUP_SCHEDULE}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS}
    volumes:
      - ./data/config:/etc/gitlab:ro
      - ./data/logs:/var/log/gitlab:ro
      - ./data/data:/var/opt/gitlab:ro
      - ${BACKUP_PATH}:/backups
      - ./scripts:/scripts:ro
    networks:
      - gitlab_net
    depends_on:
      - gitlab
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    entrypoint: |
      sh -c '
        echo "Installing cron and required packages..."
        apt-get update && apt-get install -y cron curl
        
        echo "Setting up backup cron job..."
        echo "$${CRON_SCHEDULE} /scripts/backup-cron.sh >> /var/log/backup.log 2>&1" > /etc/crontab
        
        echo "Starting cron daemon..."
        cron -f
      '

  gitlab-runner:
    image: gitlab/gitlab-runner:latest
    container_name: gitlab-runner
    restart: unless-stopped
    volumes:
      - ./config/runner-config.toml:/etc/gitlab-runner/config.toml
      - /var/run/docker.sock:/var/run/docker.sock
      - gitlab-runner-cache:/cache
      - ./scripts:/scripts:ro
    networks:
      - gitlab_net
    depends_on:
      - gitlab
    deploy:
      resources:
        limits:
          memory: ${RUNNER_MEMORY_LIMIT:-2G}
          cpus: '${RUNNER_CPU_LIMIT:-2}'
        reservations:
          memory: ${RUNNER_MEMORY_RESERVATION:-512M}
          cpus: '${RUNNER_CPU_RESERVATION:-0.5}'
    environment:
      - DOCKER_TLS_CERTDIR=""
      - DOCKER_DRIVER=overlay2
      - GITLAB_URL=${GITLAB_URL}
    privileged: true

networks:
  gitlab_net:
    driver: bridge

volumes:
  gitlab-runner-cache:
    driver: local
